<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vokabeltrainer: Deutsch - Franz√∂sisch</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.8.49/Tone.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            background-color: #f3f4f6; /* Tailwind gray-100 */
            color: #1f2937; /* Tailwind gray-800 */
            padding: 1rem;
            overflow-x: hidden; /* Prevent horizontal scroll */
        }
        .card {
            background-color: white;
            padding: 1.5rem; /* p-6 */
            border-radius: 0.75rem; /* rounded-xl */
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); /* shadow-lg */
            width: 100%;
            max-width: 500px;
            text-align: center;
        }
        .btn {
            padding: 0.75rem 1.5rem; /* py-3 px-6 */
            border-radius: 0.5rem; /* rounded-lg */
            font-weight: 600; /* font-semibold */
            transition: background-color 0.2s;
            cursor: pointer;
            border: none;
            margin-top: 0.5rem; /* Added consistent margin */
        }
        .btn-primary {
            background-color: #3b82f6; /* bg-blue-500 */
            color: white;
        }
        .btn-primary:hover {
            background-color: #2563eb; /* bg-blue-600 */
        }
        .btn-secondary {
            background-color: #6b7280; /* bg-gray-500 */
            color: white;
        }
        .btn-secondary:hover {
            background-color: #4b5563; /* bg-gray-600 */
        }
        .btn-save {
            background-color: #10b981; /* bg-emerald-500 */
            color: white;
        }
        .btn-save:hover {
            background-color: #059669; /* bg-emerald-600 */
        }
        input[type="text"] {
            border: 1px solid #d1d5db; /* border-gray-300 */
            padding: 0.5rem 0.75rem; /* py-2 px-3 */
            border-radius: 0.375rem; /* rounded-md */
            width: 100%;
            margin-bottom: 1rem; /* mb-4 */
            box-sizing: border-box;
        }
        .feedback {
            min-height: 50px; /* Adjusted to allow for two lines of text */
            margin-top: 1rem; /* mt-4 */
            font-weight: 500; /* font-medium */
        }
        .correct {
            color: #059669; /* text-emerald-700 */
        }
        .incorrect {
            color: #b91c1c; /* text-red-700 */
        }
        .progress-bar-container {
            width: 100%;
            background-color: #e5e7eb; /* bg-gray-200 */
            border-radius: 0.25rem; /* rounded */
            margin-top: 1rem; /* mt-4 */
            margin-bottom: 0.5rem; /* mb-2 */
        }
        .progress-bar {
            height: 10px;
            background-color: #3b82f6; /* bg-blue-500 */
            border-radius: 0.25rem; /* rounded */
            width: 0%;
            transition: width 0.3s ease-in-out;
        }
        /* Animation for word display */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .fade-in {
            animation: fadeIn 0.5s ease-out;
        }
        .save-feedback {
            font-size: 0.875rem; /* text-sm */
            color: #4b5563; /* text-gray-600 */
            min-height: 20px;
            margin-top: 0.5rem;
        }
    </style>
</head>
<body>
    <div class="card">
        <header class="mb-6">
            <h1 class="text-3xl font-bold text-blue-600 mb-2">Vokabeltrainer</h1>
            <p class="text-xl text-gray-700">Deutsch ‚ûî Franz√∂sisch</p>
            <div class="flex justify-around items-center mt-4 text-sm sm:text-base">
                <div>Punkte: <span id="score" class="font-semibold">0</span></div>
                <div>Level: <span id="award" class="font-semibold">Anf√§nger ü•â</span></div>
            </div>
            <div class="progress-bar-container">
                <div id="progressBar" class="progress-bar"></div>
            </div>
            <div id="progressText" class="text-xs text-gray-500">0 / 0</div>
        </header>

        <main id="quizArea">
            <div id="germanWordContainer" class="mb-4">
                <p class="text-lg text-gray-600 mb-1">Deutsches Wort:</p>
                <p id="germanWord" class="text-2xl sm:text-3xl font-bold h-12 flex items-center justify-center"></p>
            </div>
            <input type="text" id="frenchAnswer" placeholder="Franz√∂sische √úbersetzung eingeben..." class="text-center text-lg">
            <button id="checkButton" class="btn btn-primary w-full">Pr√ºfen</button>
            <button id="nextButton" class="btn btn-secondary w-full" style="display: none;">Weiter</button>
            <div id="feedback" class="feedback text-lg"></div>
        </main>

        <footer class="mt-6">
            <button id="saveButton" class="btn btn-save w-full">Fortschritt speichern</button>
            <div id="saveFeedback" class="save-feedback"></div>
            <button id="restartButton" class="btn bg-gray-200 text-gray-700 hover:bg-gray-300 w-full">Neu starten (l√∂scht Speicherstand)</button>
        </footer>
    </div>

    <script>
        // --- Sound Effects ---
        let correctSound, incorrectSound;
        function initSounds() {
            if (typeof Tone !== 'undefined') {
                if (!correctSound) {
                    correctSound = new Tone.Synth({
                        oscillator: { type: "sine" },
                        envelope: { attack: 0.005, decay: 0.1, sustain: 0.3, release: 0.3 }
                    }).toDestination();
                }
                if (!incorrectSound) {
                    incorrectSound = new Tone.Synth({
                        oscillator: { type: "square" },
                        envelope: { attack: 0.005, decay: 0.2, sustain: 0, release: 0.2 }
                    }).toDestination();
                }
                // Start audio context on first interaction if not already started
                if (Tone.context.state !== 'running') {
                    Tone.start();
                }
            } else {
                console.warn("Tone.js not loaded. Sound effects will be disabled.");
            }
        }
        document.body.addEventListener('click', initSounds, { once: true });


        // --- Vocabulary Data ---
        const vocabulary = [
            // Data from PXL_20250518_104201838.jpg
            { german: "die Versp√§tung", french: ["le retard"] },
            { german: "ein Reisebus", french: ["un car", "un autocar"] },
            { german: "kritisieren", french: ["critiquer"] },
            { german: "eine Tomate", french: ["une tomate"] },
            { german: "aufstehen", french: ["se lever"] },
            { german: "senden, schicken", french: ["envoyer"] },
            { german: "ein (soziales) Netzwerk", french: ["un r√©seau social", "un r√©seau (social)", "un r√©seau"] },
            { german: "sich (hin-)setzen", french: ["s'asseoir"] },
            { german: "ein Spiel", french: ["un jeu"] },
            { german: "lustig, unterhaltsam", french: ["amusant", "dr√¥le"] },
            { german: "sich fragen", french: ["se demander"] },
            { german: "w√§hrend", french: ["pendant"] },
            { german: "eine Reise", french: ["un voyage"] },
            { german: "ein Fenster", french: ["une fen√™tre"] },
            // Data from PXL_20250518_104156014.jpg
            { german: "zu dritt", french: ["√† trois"] },
            { german: "wegen jmd./etw.", french: ["√† cause de quelqu'un", "√† cause de quelque chose", "√† cause de qn/qc"] },
            { german: "ein Land", french: ["un pays"] },
            { german: "derselbe, dieselbe, dasselbe", french: ["le m√™me", "la m√™me"] },
            { german: "ein Rabe", french: ["un corbeau"] },
            { german: "wissen", french: ["savoir"] },
            { german: "bestrafen", french: ["punir"] },
            { german: "unter Schock stehen", french: ["√™tre sous le choc"] },
            { german: "als n√§chstes", french: ["prochain", "prochaine", "ensuite"] },
            { german: "schlafen", french: ["dormir"] },
            { german: "eine Nacht", french: ["une nuit"] },
            { german: "ein(e) Cousin(e)", french: ["un cousin", "une cousine"] },
            { german: "eine Demo", french: ["une manifestation", "une manif"] },
            { german: "die Hilfe", french: ["l'aide"] },
            { german: "Angst machen", french: ["faire peur"] },
            { german: "das ist keine sichere Sache", french: ["ce n'est pas gagn√©"] },
            // Data from PXL_20250518_104148111.jpg
            { german: "jmd. Sorgen machen", french: ["pr√©occuper quelqu'un", "pr√©occuper qn"] },
            { german: "nur", french: ["seulement"] },
            { german: "ein Zimmer", french: ["une pi√®ce", "une chambre"] },
            { german: "eine Pause", french: ["une pause"] },
            { german: "ein Brief", french: ["une lettre"] },
            { german: "das Mobbing", french: ["le harc√®lement"] },
            { german: "sie (plural)", french: ["eux", "elles"] },
            { german: "das Gegenteil", french: ["le contraire"] },
            { german: "verlegen", french: ["g√™n√©", "g√™n√©e"] },
            { german: "tragen (Kleidung)", french: ["porter"] },
            { german: "im Mittelpunkt stehen", french: ["√™tre au centre de l'attention"] },
            { german: "in Richtung", french: ["vers", "en direction de"] },
            { german: "ohne etw. zu tun", french: ["sans faire quelque chose", "sans faire qc"] },
            { german: "er/sie/es sagt", french: ["il dit", "elle dit"] },
            { german: "ein Diktat", french: ["une dict√©e"] },
            { german: "weggehen, wegfahren", french: ["partir"] },
            { german: "auf der anderen Seite", french: ["de l'autre c√¥t√©"] },
            { german: "der Sommer", french: ["l'√©t√©"] },
            // Data from PXL_20250518_104143900.jpg
            { german: "etw. tun k√∂nnen (wissen wie)", french: ["savoir faire quelque chose", "savoir faire qc"] },
            { german: "ein Ehemann", french: ["un mari"] },
            { german: "auf dem Weg nach...", french: ["en route pour"] },
            { german: "ein Auto", french: ["une voiture"] },
            { german: "eine Stra√üenbahn", french: ["un tramway", "un tram"] },
            { german: "ein Helm", french: ["un casque"] },
            { german: "schreien", french: ["crier"] },
            { german: "eine Person", french: ["une personne"] },
            { german: "gro√ü (Person, Ding)", french: ["grand", "grande", "gros", "grosse"] },
            { german: "ein Fleck", french: ["une tache"] },
            { german: "das Gesicht", french: ["le visage"] },
            { german: "sch√ºchtern", french: ["timide"] },
            { german: "fr√ºh", french: ["t√¥t"] },
            { german: "Stufenleiter", french: ["CPE"] }, 
            { german: "jmd. begegnen", french: ["rencontrer quelqu'un", "rencontrer qn"] },
            { german: "abwesend", french: ["absent", "absente"] },
            { german: "zahlreich", french: ["nombreux", "nombreuse"] },
            // Data from PXL_20250518_104129943.jpg
            { german: "seine/ihre (Pluralbesitz)", french: ["leur", "leurs"] },
            { german: "das Herz", french: ["le coeur"] },
            { german: "der Bauch", french: ["le ventre"] },
            { german: "ein Arzt", french: ["un m√©decin", "une m√©decin"] },
            { german: "eher, vielmehr, ziemlich", french: ["plut√¥t"] },
            { german: "ein Fernseher", french: ["une t√©l√©", "une t√©l√©vision", "un t√©l√©viseur"] },
            { german: "schlecht gehen", french: ["aller mal"] },
            { german: "vibrieren", french: ["vibrer"] },
            { german: "ein Badezimmer", french: ["une salle de bain", "une salle de bains"] },
            { german: "ein Fahrrad", french: ["un v√©lo"] },
            { german: "etw. √ºberqueren", french: ["traverser quelque chose", "traverser qc"] },
            { german: "sich f√ºhlen", french: ["se sentir"] },
            { german: "die Seilbahn", french: ["le t√©l√©ph√©rique"] },
            { german: "eine Lage/Gegend", french: ["un site"] },
            { german: "anschlie√üend, danach", french: ["ensuite", "puis", "apr√®s"] },
            { german: "der Klettersteig", french: ["la via ferrata"] },
            { german: "die Wanderung", french: ["la randonn√©e"] },
            // Data from PXL_20250518_104122358.jpg
            { german: "etw. schlie√üen", french: ["fermer quelque chose", "fermer qc"] },
            { german: "ICE (Zug)", french: ["un TGV"] },
            { german: "eine Wohnung", french: ["un appartement"] },
            { german: "etw. holen/abholen", french: ["aller chercher quelque chose", "aller chercher qc"] },
            { german: "eine schriftl. Entschuldigung", french: ["un mot d'absence", "une excuse √©crite"] },
            { german: "ein Esszimmer", french: ["une salle √† manger"] },
            { german: "ein Wohnzimmer", french: ["un salon"] },
            { german: "ein Stuhl", french: ["une chaise"] },
            { german: "eine K√ºche", french: ["une cuisine"] },
            { german: "etw. √∂ffnen", french: ["ouvrir quelque chose", "ouvrir qc"] },
            { german: "ein K√ºhlschrank", french: ["un r√©frig√©rateur", "un frigo"] },
            { german: "im Stehen", french: ["debout"] },
            { german: "eine Postkarte", french: ["une carte postale"] },
            { german: "ein Wochenende", french: ["un week-end", "un weekend"] },
            { german: "Skifahren, Ski", french: ["le ski", "faire du ski"] },
            { german: "eine Tante", french: ["une tante"] },
            { german: "ein Onkel", french: ["un oncle"] },
            { german: "ein Prospekt", french: ["un prospectus", "une brochure"] },
            // Data from PXL_20250518_104109257.jpg (Character descriptions)
            { german: "geduldig", french: ["patient", "patiente"] },
            { german: "ungeduldig", french: ["impatient", "impatiente"] },
            { german: "genial", french: ["g√©nial", "g√©niale"] },
            { german: "intelligent", french: ["intelligent", "intelligente"] },
            { german: "fr√∂hlich", french: ["content", "contente", "joyeux", "joyeuse"] },
            { german: "traurig", french: ["triste"] },
            { german: "nett", french: ["sympa", "gentil", "gentille"] },
            { german: "fies", french: ["m√©chant", "m√©chante"] },
            { german: "normal", french: ["normal", "normale"] }, 
            { german: "komisch (seltsam)", french: ["bizarre", "√©trange"] },
            { german: "neugierig", french: ["curieux", "curieuse"] },
            { german: "uninteressiert", french: ["pas int√©ress√©", "pas int√©ress√©e", "d√©sint√©ress√©", "d√©sint√©ress√©e"] },
            { german: "lustig (Person)", french: ["dr√¥le", "amusant", "amusante"] },
            { german: "ernst", french: ["s√©rieux", "s√©rieuse"] },
            { german: "mutig", french: ["courageux", "courageuse"] },
            { german: "ruhig", french: ["calme", "tranquille"] },
            { german: "lebhaft", french: ["vivant", "vivante", "anim√©", "anim√©e"] },
            { german: "offen (Person)", french: ["ouvert", "ouverte"] },
            { german: "verschlossen (Person)", french: ["renferm√©", "renferm√©e", "ferm√©", "ferm√©e"] },
            { german: "gef√§hrlich", french: ["dangereux", "dangereuse"] },
            { german: "mysteri√∂s", french: ["myst√©rieux", "myst√©rieuse"] }
        ];

        // --- Game State ---
        let currentWordData = null;
        let score = 0;
        let correctAnswersInSession = 0;
        let wordsAskedInSession = 0; 
        let shuffledVocabulary = [];
        const localStorageKey = 'vocabTrainerProgress_DeutschFranz';
        
        // --- DOM Elements ---
        const germanWordEl = document.getElementById('germanWord');
        const frenchAnswerEl = document.getElementById('frenchAnswer');
        const checkButton = document.getElementById('checkButton');
        const nextButton = document.getElementById('nextButton');
        const feedbackEl = document.getElementById('feedback');
        const scoreEl = document.getElementById('score');
        const awardEl = document.getElementById('award');
        const restartButton = document.getElementById('restartButton');
        const saveButton = document.getElementById('saveButton');
        const saveFeedbackEl = document.getElementById('saveFeedback');
        const germanWordContainer = document.getElementById('germanWordContainer');
        const progressBarEl = document.getElementById('progressBar');
        const progressTextEl = document.getElementById('progressText');

        // --- Award Levels (based on score) ---
        const awards = [
            { scoreLimit: 0, name: "Anf√§nger", icon: "ü•â" },
            { scoreLimit: 50, name: "Entdecker", icon: "ü•à" },
            { scoreLimit: 100, name: "Kenner", icon: "ü•á" },
            { scoreLimit: 150, name: "Profi", icon: "‚≠ê" },
            { scoreLimit: 200, name: "Experte", icon: "üèÜ" },
            { scoreLimit: 250, name: "W√∂rterMeister", icon: "üëë" }
        ];

        // --- Functions ---
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        function saveProgress() {
            const gameState = {
                score,
                correctAnswersInSession,
                wordsAskedInSession,
                shuffledVocabulary
            };
            try {
                localStorage.setItem(localStorageKey, JSON.stringify(gameState));
                saveFeedbackEl.textContent = "Fortschritt gespeichert!";
                setTimeout(() => { saveFeedbackEl.textContent = ""; }, 2000);
            } catch (e) {
                console.error("Speichern fehlgeschlagen:", e);
                saveFeedbackEl.textContent = "Speichern fehlgeschlagen.";
                 setTimeout(() => { saveFeedbackEl.textContent = ""; }, 2000);
            }
        }

        function loadProgress() {
            try {
                const savedStateJSON = localStorage.getItem(localStorageKey);
                if (savedStateJSON) {
                    const savedState = JSON.parse(savedStateJSON);
                    // Basic validation of loaded data
                    if (typeof savedState.score === 'number' &&
                        typeof savedState.correctAnswersInSession === 'number' &&
                        typeof savedState.wordsAskedInSession === 'number' &&
                        Array.isArray(savedState.shuffledVocabulary)) {
                        
                        score = savedState.score;
                        correctAnswersInSession = savedState.correctAnswersInSession;
                        wordsAskedInSession = savedState.wordsAskedInSession;
                        shuffledVocabulary = savedState.shuffledVocabulary;
                        
                        // Ensure shuffledVocabulary is not empty if wordsAskedInSession implies it shouldn't be
                        if (shuffledVocabulary.length === 0 && vocabulary.length > 0) {
                            // This case might happen if something went wrong with saving an empty list
                            // or if the vocabulary itself is empty (which shouldn't happen with the predefined list)
                            // Fallback to starting a new game if the loaded list is problematic
                            console.warn("Geladene Vokabelliste war leer oder inkonsistent. Starte neues Spiel.");
                            return false; // Indicate load failed, start new game
                        }
                        return true; // Indicate progress was loaded
                    } else {
                        console.warn("Geladene Daten haben ein ung√ºltiges Format.");
                        localStorage.removeItem(localStorageKey); // Remove corrupted data
                        return false;
                    }
                }
            } catch (e) {
                console.error("Laden des Fortschritts fehlgeschlagen:", e);
                localStorage.removeItem(localStorageKey); // Remove potentially corrupted data
            }
            return false; // No saved progress or error during load
        }

        function startNewGameSession() {
            score = 0;
            correctAnswersInSession = 0;
            wordsAskedInSession = 0;
            shuffledVocabulary = [...vocabulary]; // Make a fresh copy
            shuffleArray(shuffledVocabulary);
            
            feedbackEl.innerHTML = "";
            frenchAnswerEl.value = "";
            
            if (shuffledVocabulary.length > 0) {
                nextWord(); // This will set currentWordData and display it
            } else {
                // Handle case where vocabulary might be empty (should not happen with current setup)
                germanWordEl.textContent = "Keine Vokabeln geladen.";
                checkButton.disabled = true;
                frenchAnswerEl.disabled = true;
            }
            
            updateAllDisplaysAndUI();
        }
        
        function initializeOrLoadGame() {
            if (loadProgress()) {
                // Progress loaded successfully
                if (wordsAskedInSession >= shuffledVocabulary.length) {
                    // Game was finished when saved
                    finishGame(); // Display finished state
                } else {
                    // Game was in progress
                    currentWordData = shuffledVocabulary[wordsAskedInSession];
                    displayWord(); // Display the word they left off on
                }
                updateAllDisplaysAndUI();
                feedbackEl.innerHTML = `<span class="text-blue-600">Fortschritt geladen!</span>`;
            } else {
                // No progress found or loading failed, start a new game
                startNewGameSession();
            }
        }

        function displayWord() {
            if (!currentWordData) { // Should not happen if nextWord is called correctly
                 console.error("currentWordData ist null in displayWord");
                 germanWordEl.textContent = "Fehler";
                 // Potentially call finishGame or startNewGameSession to recover
                 if(shuffledVocabulary.length > 0 && wordsAskedInSession < shuffledVocabulary.length) {
                    currentWordData = shuffledVocabulary[wordsAskedInSession];
                 } else {
                    finishGame(); // Or some other recovery
                    return;
                 }
            }
            germanWordEl.textContent = currentWordData.german;
            germanWordContainer.classList.remove('fade-in');
            void germanWordContainer.offsetWidth; 
            germanWordContainer.classList.add('fade-in');

            frenchAnswerEl.value = "";
            frenchAnswerEl.focus();
        }

        function nextWord() {
            if (wordsAskedInSession >= shuffledVocabulary.length) {
                finishGame();
                return;
            }

            currentWordData = shuffledVocabulary[wordsAskedInSession];
            displayWord();
            updateAllDisplaysAndUI(); // Ensures buttons and input are correctly set for new word
            feedbackEl.innerHTML = ""; // Clear feedback for the new word
        }
        
        function updateAllDisplaysAndUI() {
            updateScoreDisplay();
            updateAwardDisplay();
            updateProgressDisplay();

            // Reset to "waiting for answer" state
            checkButton.disabled = false;
            checkButton.style.display = 'block';
            nextButton.style.display = 'none';
            frenchAnswerEl.disabled = false;
            if (document.activeElement !== frenchAnswerEl) { // Avoid stealing focus if already there
                 frenchAnswerEl.focus();
            }
        }


        function checkAnswer() {
            initSounds(); 
            const userAnswer = frenchAnswerEl.value.trim().toLowerCase();
            // Ensure currentWordData is available
            if (!currentWordData || !currentWordData.french) {
                console.error("currentWordData or currentWordData.french is not defined in checkAnswer");
                feedbackEl.innerHTML = `<span class="incorrect">Ein Fehler ist aufgetreten. Bitte neu starten.</span>`;
                // Disable buttons to prevent further errors
                checkButton.disabled = true;
                nextButton.disabled = true;
                return;
            }
            const correctFrenchAnswers = currentWordData.french.map(ans => ans.toLowerCase());

            let isCorrect = false;
            for (const correctAns of correctFrenchAnswers) {
                const normalizedCorrectAns = correctAns.startsWith("l'") || correctAns.startsWith("s'") ? correctAns.substring(2) : correctAns;
                const normalizedUserAns = userAnswer.startsWith("l'") || userAnswer.startsWith("s'") ? userAnswer.substring(2) : userAnswer;

                if (correctAns === userAnswer || normalizedCorrectAns === normalizedUserAns) {
                    isCorrect = true;
                    break;
                }
            }

            if (isCorrect) {
                score += 10;
                correctAnswersInSession++;
                feedbackEl.innerHTML = `<span class="correct">Richtig! üéâ</span>`;
                if (correctSound && Tone.context.state === 'running') correctSound.triggerAttackRelease("C4", "0.2s");
            } else {
                feedbackEl.innerHTML = `<span class="incorrect">Leider falsch. Richtig ist: ${currentWordData.french.join(' / ')}</span>`;
                if (incorrectSound && Tone.context.state === 'running') incorrectSound.triggerAttackRelease("A2", "0.3s");
                shuffledVocabulary.push(currentWordData); // Add word to end of list to ask again
            }
            
            wordsAskedInSession++; 
            updateScoreDisplay();
            updateAwardDisplay();
            updateProgressDisplay(); // Update progress, total might have changed

            checkButton.disabled = true;
            checkButton.style.display = 'none';
            nextButton.style.display = 'block';
            frenchAnswerEl.disabled = true;
            nextButton.focus();
        }

        function updateScoreDisplay() {
            scoreEl.textContent = score;
        }

        function updateAwardDisplay() {
            let currentAward = awards[0]; 
            for (let i = awards.length - 1; i >= 0; i--) {
                if (score >= awards[i].scoreLimit) {
                    currentAward = awards[i];
                    break; 
                }
            }
            awardEl.innerHTML = `${currentAward.name} ${currentAward.icon}`;
        }
        
        function updateProgressDisplay() {
            const totalWordsToAsk = shuffledVocabulary.length;
            // Ensure wordsAskedInSession doesn't exceed totalWordsToAsk for percentage calculation
            const currentProgressCount = Math.min(wordsAskedInSession, totalWordsToAsk);
            const progressPercentage = totalWordsToAsk > 0 ? (currentProgressCount / totalWordsToAsk) * 100 : 0;
            
            progressBarEl.style.width = `${Math.min(progressPercentage, 100)}%`;
            progressTextEl.textContent = `${currentProgressCount} / ${totalWordsToAsk}`;
        }

        function finishGame() {
            germanWordEl.textContent = "üèÅ";
            germanWordContainer.classList.remove('fade-in');
            void germanWordContainer.offsetWidth; 
            germanWordContainer.classList.add('fade-in');

            const totalAttempts = wordsAskedInSession; // This is the true number of questions presented
            const percentage = totalAttempts > 0 ? Math.round((correctAnswersInSession / totalAttempts) * 100) : 0;
            
            feedbackEl.innerHTML = `Super! Du hast alle ${shuffledVocabulary.length} Vokabeln gelernt (ggf. mehrfach). <br>Insgesamt ${totalAttempts} Fragen beantwortet. Davon ${correctAnswersInSession} richtig (${percentage}%). <br>Dein Punktestand: ${score}.`;
            checkButton.style.display = 'none';
            nextButton.style.display = 'none';
            frenchAnswerEl.disabled = true;
            frenchAnswerEl.value = "";
            updateProgressDisplay(); // Ensure progress bar shows 100% or final state
            restartButton.focus();
        }
        
        function handleRestart() {
            localStorage.removeItem(localStorageKey); // Clear saved progress
            saveFeedbackEl.textContent = "Speicherstand gel√∂scht.";
            setTimeout(() => { saveFeedbackEl.textContent = ""; }, 2000);
            startNewGameSession(); // Start a completely new game
        }

        // --- Event Listeners ---
        checkButton.addEventListener('click', checkAnswer);
        nextButton.addEventListener('click', nextWord);
        restartButton.addEventListener('click', handleRestart);
        saveButton.addEventListener('click', saveProgress);

        frenchAnswerEl.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault(); // Prevent potential form submission if wrapped in a form
                if (!checkButton.disabled && checkButton.style.display === 'block') {
                    checkAnswer();
                } else if (!nextButton.disabled && nextButton.style.display === 'block') {
                    nextWord();
                }
            }
        });

        // --- Initial Load ---
        document.addEventListener('DOMContentLoaded', initializeOrLoadGame);

    </script>
</body>
</html>
